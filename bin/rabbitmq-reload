#!/bin/bash -el

NODE=$(cat /var/lib/rabbitmq/nodename)
ETCDCTL="etcdctl --peers $ETCD_URL"
# Set the nodename
export RABBITMQ_NODENAME=rabbit@${NODE}
export RABBITMQ_USER=${RABBITMQ_USER:-rabbitmq}
export RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-rabbitmq}
export RABBITMQ_CLUSTER_NAME=${RABBITMQ_CLUSTER_NAME:-totem}



if [ ! -f /var/lib/rabbitmq/reset ]; then
    if $ETCDCTL mk $ETCD_RABBITMQ_BASE/rabbitmq/seed $NODE; then
        echo "Initializing seed config..."
        # Give some time time for startup. (Need better way to handle this.)
        sleep 10s
        # Queues beginning with ha.* are highly available
        rabbitmqctl delete_user guest
        rabbitmqctl set_cluster_name $RABBITMQ_CLUSTER_NAME
        rabbitmqctl set_policy ha-all "^ha\." '{"ha-mode":"all"}'
        rabbitmqctl set_policy events_ha ".*_events$" '{"ha-mode":"exactly", "ha-params":2, "ha-sync-mode":"manual", "ha-sync-batch-size":50 }'
        rabbitmqctl add_user ${RABBITMQ_USER} ${RABBITMQ_PASSWORD}
        rabbitmqctl set_permissions -p / ${RABBITMQ_USER} ".*" ".*" ".*"
        rabbitmqctl set_user_tags ${RABBITMQ_USER} administrator
        rabbitmqctl add_user executors ${EXECUTOR_PWD}
        rabbitmqctl set_permissions executors ".*" ".*" ".*"
        rabbitmqctl add_user broker ${BROKER_PWD}
        rabbitmqctl set_user_tags broker administrator
        rabbitmqctl set_permissions broker ".*" ".*" ".*"
    else
        rabbitmqctl stop_app
        rabbitmqctl reset
        supervisorctl stop rabbitmq-server
        supervisorctl start rabbitmq-server
    fi
    touch /var/lib/rabbitmq/reset
fi

echo "Cluster Initialized...."




